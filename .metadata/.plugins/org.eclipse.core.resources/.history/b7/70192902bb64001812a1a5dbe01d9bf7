package com.niit.CEBSkillMapperRestFEnd.controller;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.niit.CEBSkillMapper.model.Employee;
import com.niit.CEBSkillMapper.model.Skills;
import com.niit.CEBSkillMapper.service.EmployeeService;
import com.niit.CEBSkillMapper.service.SkillService;


@CrossOrigin(origins = "http://localhost:4200")
@RestController
@RequestMapping("/api/skill")
public class SkillController {
	@Autowired
	private SkillService skillService;
	@Autowired
	private EmployeeService employeeService;

	
	@GetMapping
	public ResponseEntity<List<Skills>> listAllSkills() {		
		return new ResponseEntity<List<Skills>>(skillService.getAllSkills(), HttpStatus.OK);
	}
	
	@GetMapping("/{skillId}")
	public ResponseEntity<Skills> getSkillById(@PathVariable("skillId") int skillId) {
		
		if(skillService.findByEmployeeId(skillId)!=null) {
			return new ResponseEntity<Skills>(skillService.findByEmployeeId(skillId), HttpStatus.OK);
		}
		else 
			return new ResponseEntity<Skills>(HttpStatus.NOT_FOUND); 
	}
	
	@DeleteMapping("/{skillid}")
	public ResponseEntity<Void> deleteEmployeeById(@PathVariable("skills") Skills skills) {
		skillService.delete(skills);
			return new ResponseEntity<Void>(HttpStatus.OK);
	}
	@PostMapping
	public ResponseEntity<Void> addSkills(@RequestBody Skills skill) {
		
		skillService.add(skill);
		return new ResponseEntity<Void>(HttpStatus.CREATED);
	}
	@PostMapping(value="/update")
	public ResponseEntity<Object> updateSkill(@RequestBody Skill skill,HttpSession session)
	{
		if(session.getAttribute("loggedInUser")!=null)
		{

			if(skillsRepository.updateSkill(skill))
			{
				return new ResponseEntity<Object>(skill,HttpStatus.CREATED);
			}
			else
			{
				return new ResponseEntity<Object>(skill,HttpStatus.NOT_IMPLEMENTED);
			}
		}
		else
			return new ResponseEntity<Object>("Please Login first",HttpStatus.UNAUTHORIZED); 

	}

	
}
